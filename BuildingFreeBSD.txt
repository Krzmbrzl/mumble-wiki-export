{{Warning
|message=The build instructions listed here only apply to Mumble v1.3.x or older. If you want to build Mumble starting from v1.4.0, checkout https://github.com/mumble-voip/mumble/tree/master/docs/dev/build-instructions
}}

{{Building}}

== Compatible FreeBSD Releases ==
I can only confirm that Murmur runs on the following FreeBSD releases. However, it should build and run on others just fine. Feel free to edit this to add more versions that you've had success with.

*FreeBSD 7.1
*FreeBSD 7.2
*FreeBSD 8.0
*FreeBSD 8.1
*FreeBSD 8.2
*FreeBSD 9.0
*FreeBSD 9.1
*FreeBSD 10.1

== Mumble Client ==

This is a place holder. This guide is targeted towards Murmur from git at the moment. You should be able to install the Mumble client 1.2.8 from ports relatively pain-free:

 cd /usr/ports/audio/mumble
 make install clean

== Murmur from Ports ==

You can rather trivially install Murmur 1.2.8 from the ports tree:

 cd /usr/ports/audio/murmur
 make install clean

== Murmur from git ==

=== Grabbing sources from git ===

I put this part here because I got sick of going over to the Linux page every time I build Murmur on a new machine. If you haven't already installed git:

 cd /usr/ports/devel/git
 make install clean

or for the impatient:

 pkg install git

Next, clone the entire repository:

 git clone git://github.com/mumble-voip/mumble.git mumble
 cd mumble
 git submodule init
 git submodule update

Alternatively, you can fetch a zip file of the entire repository, without the need for git, like so:

 cd ~
 fetch https://github.com/mumble-voip/mumble/archive/master.zip
 unzip master.zip
 rm master.zip
 cd mumble-master

=== Install the dependencies ===

The following are the main dependencies required for building Murmur 1.2.x from git using Qt4.

*devel/boost (devel/boost-libs on 8.0+)
*devel/ice
*security/openssl (See notes below)
*devel/protobuf
*devel/qt4-corelib
*devel/qt4-moc
*net/qt4-network
*devel/qt4-qmake
*devel/qt4-rcc
*databases/qt4-mysql-plugin (See note below)
*databases/qt4-sql
*databases/qt4-sqlite-plugin
*textproc/qt4-xml

If you want to include '''Bonjour''' support, include these deps as well:
*net/avahi 
*net/avahi-qt4

'''security/openssl port''': The port isn't required, however at the time of writing there's a rather nasty DoS in QSslSocket which is fixed by upgrading to OpenSSL 0.9.8o or 1.0.0a, neither of which are in base on any current release, but the latter of which is in security/openssl port at the time of writing. However, if you install this port, you'll need to rename /usr/lib/libssl.so to something else, because Qt's runtime loader will grab the non-ports libssl and cause you all manner of grief.

'''databases/qt4-mysql-plugin port''': The port is only required if you wish to use the QMYSQL driver.

=== Install the dependencies (Qt5) ===

I was able to build Murmur with Qt5 using the following dependencies:

 pkg install boost-libs ice qt5-core qt5-network qt5-xml qt5-qmake qt5-sqldrivers-sqlite3 protobuf qt5-buildtools

The same OpenSSL caveat applies as above - with the recent changes in Murmur, it will segfault on run instead:

 (gdb) bt
 #0  0x2830c0e6 in ssl_create_cipher_list () from /usr/local/lib/libssl.so.8

=== Compilation ===

To build the server, Murmur:

 qmake-qt4 CONFIG+=no-client CONFIG+=no-dbus CONFIG+=no-bonjour main.pro
 make release

For Qt5:

 /usr/local/lib/qt5/bin/qmake CONFIG+=no-client CONFIG+=no-dbus CONFIG+=no-bonjour main.pro
 make release

Note, I currently don't use '''CONFIG+=optimize''' because I'm building on 7.2 and running the binary on 7.1.
I have no idea what possible consequences could come of that. I would not expect anything, but I'm just being on the safe side.

=== Run Murmur ===

I actually prefer to build Murmur in a VM and send builds up to the production server. To view murmur's dynamic dependencies for your system and configuration, simply run <code>ldd `which murmurd`</code>.  In case you're wondering, here are the run deps (without Bonjour support):

        libprotobuf.so.7 => /usr/local/lib/libprotobuf.so.7 (0x800a5e000)
        libcrypto.so.6 => /lib/libcrypto.so.6 (0x800d84000)
        libIce.so.34 => /usr/local/lib/libIce.so.34 (0x801122000)
        libIceUtil.so.34 => /usr/local/lib/libIceUtil.so.34 (0x80166b000)
        libQtSql.so.4 => /usr/local/lib/qt4/libQtSql.so.4 (0x8018b9000)
        libQtXml.so.4 => /usr/local/lib/qt4/libQtXml.so.4 (0x801b00000)
        libQtNetwork.so.4 => /usr/local/lib/qt4/libQtNetwork.so.4 (0x801d4e000)
        libQtCore.so.4 => /usr/local/lib/qt4/libQtCore.so.4 (0x8020df000)
        libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x802610000)
        libm.so.5 => /lib/libm.so.5 (0x80290b000)
        libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x802b29000)
        libthr.so.3 => /lib/libthr.so.3 (0x802d36000)
        libc.so.7 => /lib/libc.so.7 (0x802f58000)
        libz.so.6 => /lib/libz.so.6 (0x8032a2000)
        libbz2.so.4 => /usr/lib/libbz2.so.4 (0x8034b7000)
        libgthread-2.0.so.0 => /usr/local/lib/libgthread-2.0.so.0 (0x8036c8000)
        libglib-2.0.so.0 => /usr/local/lib/libglib-2.0.so.0 (0x8038cc000)
        libiconv.so.3 => /usr/local/lib/libiconv.so.3 (0x803bae000)
        libintl.so.9 => /usr/local/lib/libintl.so.9 (0x803eaa000)
        libpcre.so.3 => /usr/local/lib/libpcre.so.3 (0x8040b4000)

* see [[Running Murmur]] for information on how to start the server.

== Caveats and Historical problems ==

=== No SSL ciphers of at least 128 bit found ===

It seems to me like there's a problem with Qt on FreeBSD. When you have OpenSSL from ports, and the ABI is different from the one in base (say, OpenSSL 1.0 from ports, 0.9.8 from base) Qt does some weird things. It'll load half the library from ports (the part that ld(1) loads), then Qt comes along and loads its share from base. The result is lots of unexpected behavior, with "No SSL ciphers of at least 128 bit found" being the most common.

The dirty fix if you have root access is simply to rename the base libssl.so to something so that Qt's loader doesn't find it, and looks in /usr/local/lib instead:

 # mv /usr/lib/libssl.so /usr/lib/libssl.so.old

'''Note:''' On FreeBSD 10.1 with Qt5, you have to rename /usr/lib/libssl.so.7, which breaks a lot of stuff including git. :(

=== No certificates could be verified ===

Note that recent versions of OpenSSL will verify the server's own certificate at the start of a TLS session, so you might get an error like "No certificates could be verified". Older versions of Murmur didn't have the FreeBSD cert store in the search path, so you needed to tell it where to find it:

 qmake-qt4 CONFIG+=no-client CONFIG+=no-dbus CONFIG+=no-bonjour \
 DEFINES+="SYSTEM_CA_BUNDLE=/usr/local/share/certs/ca-root-nss.crt" main.pro

=== slice2cpp errors ===

If you get errors about slice2cpp or Ice/SliceChecksumDict.ice, you must edit src/murmur/murmur.pro and add another include path (/usr/local/share/Ice) to the slice2cpp line (#72 at time of writing), like so:

 slice2cpp --checksum -I/usr/local/share/Ice ....

... or you could just symlink that directory to one of the directories the Makefile searches already, or use patch [http://sourceforge.net/tracker/?func=detail&aid=3026518&group_id=147372&atid=768007 #3026518].

This error has been fixed for a while.

=== alloca.h missing ===

When building 1.1.8 or earlier, build fails because of a missing alloca.h header. On FreeBSD, alloca() is declared in [http://www.mail-archive.com/autoconf@gnu.org/msg18685.html stdlib.h], so it's safe to comment the line out (in src/murmur/murmur_pch.h). This has been fixed in git for quite some time, and is apparently fixed in the port of 1.1.8.

=== Requesting crypt-nonce resync ===

On 64-bit FreeBSD installations, Murmur 1.1.x and early 1.2 builds would fail, spamming "Requesting crypt-nonce resync" messages in the log, as reported [http://sourceforge.net/projects/mumble/forums/forum/492607/topic/3201763?message=7153824 here] and [http://sourceforge.net/projects/mumble/forums/forum/492607/topic/3378871 here].

Crypto was broken on amd64 (and presumably others), however it's fixed in git. If you're trying to build a 1.1.8 server from source, [http://mumble.git.sourceforge.net/git/gitweb.cgi?p=mumble/mumble;a=commitdiff;h=279ca01e7c5eb43aaf676cc8e222e45141739a21 this patch] might help. 

This was fixed in ports ([http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/139384 ports/139384]), so if you're building from ports, make sure your ports tree is up to date.

[[Category:Development]]
